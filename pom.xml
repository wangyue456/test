<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <modelVersion>4.0.0</modelVersion>
    <groupId>springmvc-maven</groupId>
    <artifactId>easy-springmvc-maven</artifactId>
    <version>2.261</version>
    <name>springmvc-maven</name>
    <description>Creates a war file. Also includes additional static web resources, such as images, CSS, JavaScript, and some HTML files.</description>
    <Build>
    <! -Use the default file path ->
    <! -Avoid adding version number to the generated war file name ->
    <finalName> easy-springmvc-maven </finalName>
    <plugin>
    <plugin>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.1</version>
    <configuration>
    <source> 1.6 </source>
    <Goal> 1.6 </Goal>
    </Configuration>
    </plugin>
        <plugin>
      <artifactId> maven-war-plugin </artifactId>
        <configuration>
        <version> 3.0 </version>
        <！-The alternative webroot of maven's web project is in src\main\webapp. If web.xml is found in this directory, an exception that the webxml attribute is required is thrown ->
        <! -Need to add <webXml> configuration in pom.xml ->
        <! -<webXml> WebContent \ WEB-INF \ web.xml </ webXml> ->
        </Configuration>
       </plugin>
    </plugin>
  </build>
  <dependency>
  <Dependency>
  <groupId> junit </groupId>
  <artifactId> junit </artifactId>
  <version> 4.12 </version>
  <scope>test</scope>
  </dependency>
    
    <!-spring mvc dependency starts ->
<Dependency>
<groupId> org.springframework </groupId>
<artifactId> spring-webmvc </artifactId>
<version> $ {spring.version} </version>
</dependency>
<Dependency>
<groupId> org.springframework </groupId>
<artifactId> spring-jdbc </artifactId>
<version> $ {spring.version} </version>
</dependency>
<Dependency>
<groupId> org.springframework </groupId>
<artifactId> spring-context </artifactId>
<version> $ {spring.version} </version>
</dependency>
<Dependency>
<groupId> org.springframework </groupId>
<artifactId> spring-aop </artifactId>
<version> $ {spring.version} </version>
</dependency>
<Dependency>
<groupId> org.springframework </groupId>
<artifactId> spring-core </artifactId>
<version> $ {spring.version} </version>
</dependency>
<Dependency>
<groupId> org.springframework </groupId>
<artifactId>spring test</artifactId>
<version> $ {spring.version} </version>
</dependency>
<!-spring mvc dependency ends ->
<!-Solve the error when accessing the page: java.lang.NoClassDefFoundError: javax / servlet / jsp / jstl / core / Config-Start ->
<Dependency>
<groupId> jstl </groupId>
<artifactId> jstl </artifactId>
<version> 1.2 </version>
</dependency>
<Dependency>
<groupId >Tag library</groupId>
<artifactId>standard</artifactId>
<version> 1.1.2 </version>
</dependency>
<!-End->
  </dependency>
  
  <attribute>
  <project .build.sourceEncoding> UTF-8 </project .build.sourceEncoding>
  <spring .version> 3.1.2.RELEASE </spring .version>
  </attribute>
</project>
